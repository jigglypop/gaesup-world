프로젝트 개발 규칙

1. 일반 원칙
- 주석 금지: 코드 자체로 설명이 가능하도록 작성하며, 원칙적으로 주석을 작성하지 않습니다.
- 이모지 금지: 커밋 메시지, 코드, 문서 등 프로젝트의 어떤 산출물에도 이모지를 사용하지 않습니다.
- 코드 포맷팅: 모든 코드는 프로젝트에 설정된 Prettier 규칙을 따릅니다. 의미 없는 공백이나 빈 줄을 추가하지 않습니다.
- 언어: 모든 코드(변수, 함수, 클래스명 등)는 영문으로 작성합니다.

2. 아키텍처 및 파일 구조
- 기존 로직 보호: 새로운 코드를 추가하거나 수정할 때, 기존의 핵심 기능이 절대 손상되지 않도록 주의합니다.
- 관심사 분리: 로직(`index.tsx`), 스타일(`styles.css`), 타입(`types.ts`)은 반드시 파일을 분리하여 관리합니다. 여러 관심사의 로직이 한 파일에 섞이지 않도록 합니다.
- 파일 생성 최소화: 가능한 한 기존 파일을 수정하는 것을 우선으로 하며, 불필요한 신규 파일 생성은 지양합니다.
- `legacy` 디렉토리 제외: `src/legacy` 디렉토리 내의 코드는 수정하거나 분석하지 않습니다. 모든 신규 작업은 `src/core`, `examples` 등 다른 디렉토리를 중심으로 진행합니다.
- 계층형 아키텍처 준수: 프로젝트는 명확한 계층형 구조를 따릅니다.
    - Layer 1 (Core Engine & Behaviors): `ref`, `useFrame`을 사용한 순수 3D 로직, 물리 계산 등 핵심 로직만 포함합니다. React의 상태 관리(useState, useEffect, useMemo, Zustand 등)와 관련된 코드를 절대 포함해서는 안 됩니다.
    - Layer 2 (Controllers, Hooks, Stores): React의 상태 관리 로직을 담당합니다. 하위 레이어(Layer 1)의 불필요한 재렌더링을 유발해서는 안 됩니다.
    - 상위 레이어 로직 혼합 금지: React 상태 관리와 같은 상위 레이어의 코드가 하위 레이어(Core)에 절대 포함되어서는 안 됩니다.

